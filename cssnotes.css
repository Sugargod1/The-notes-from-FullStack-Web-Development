:root {
  --base-clr: #11121a;
  --line-clr: #42434a;
  --hover-clr: #222533;
  --text-clr: #e6e6ef;
  --accent-clr: #5e63ff;
  --secondary-text-clr: #b0b3c1;
}
/* using root is one of the best ways to declare the colors its a standard practice
---global scope
---consistency
---ease of maintenance

The box-sizing property determines how the total width and height of an element are calculated.
if content box is default: width and height include only the content 
padding and border added outside of this, wwhich increases total size

When using flexbox elements often need to align perfectly within a containe, and unpredictable sizing (caused by padding or borders) can break layouts.
Setting (box-sizing: border-box; ) ensures that
1. Consistency in the layout: padding, borders don't overflow or disrupt flexbox calculations.
2. Width or height of elements stays consistent, even when you add padding or borders.
3. Simpler Alignment: border-box helps avoid layout issues caused by elements exceeding their allocated space.

display: grid and flexbox difference:
Grid is 2 dimensional, precise control over placement of items.
Explicitly designed for grid based responsiveness,
Items are positioned independently of content order.

flexbox:
One dimensional (row or column)
Best for distributing space in a single axis.
Items flow relative to each other, based on content order.

Methods (parent):
1. display: flex; activates the flexbox layout for the container.

2. flex-direction: (Defines the main axis direction)
a. row (items are placed left to right ---->)
b. row-reverse (items are placed right to left <----)
c. column (items are placed top to bottom)
d. column-reverse (items are placed bottom to top)

3. justify-content (Aligns items along the main axis)
a. flex-start (items align at start) 
b. flex-end (items align at end)
c. center (items align in the center)
d. space-between (equal spaces between items)
e. space-around (Equal space around items)
f. space-evenly (Equal space distributed everywhere)

4. align-items: (Aligns items along the cross axis), Align-content (Aligns multiple rows along the cross axis)
a. stretch (Items stretch to fill the contianer)
b. flex-start (Align at the start)
c. flex-end (Align at the end)
d. center (Align at the center)
e. baseline (align items by thier baselines)

5. flex-wrap (Defines whether items should wrap:)
a. nowrap Items stay on one line.
b. wrap: Items wrap onto multiple lines.
c. wrap-reverse: Items wrap onto multiple lines in reverse order.
d. gap: Adds spacing between items.

Methods for (child):

flex: A shorthand for flex-grow, flex-shrink, and flex-basis:
Example: flex: 1 1 auto;

flex-grow: Defines how much an item grows relative to others.
Example: flex-grow: 2; (item takes twice as much space as items with flex-grow: 1).

flex-shrink: Defines how much an item shrinks relative to others.
Example: flex-shrink: 0; (item does not shrink).

flex-basis: Defines the base size of an item before space is distributed.
Example: flex-basis: 200px; (item starts at 200px width).

align-self: Aligns a single item on the cross-axis (overrides align-items for that item):
Values: auto, flex-start, flex-end, center, baseline, stretch.

order:Specifies the order of an item (default is 0):
Example: order: -1; (item appears before others).
